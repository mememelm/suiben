import { Component, OnInit} from '@angular/core';
import { ExploitantService } from "../../../services";
import { map } from "rxjs/operators";
import {MatDialog} from '@angular/material/dialog';
import { ExploitantCreateComponent } from '../../../application'
import { Exploitant } from 'src/app/constant';
import { Router, ActivatedRoute } from '@angular/router';
import { ExploitantDetailComponent } from '../exploitant-detail/exploitant-detail.component';


@Component({
  selector: 'app-exploitant-list',
  templateUrl: './exploitant-list.component.html',
  styleUrls: ['./exploitant-list.component.css'],  
})
export class ExploitantListComponent implements OnInit {

  title = 'exploitants'

  exploitants: any
  filteredCedar: any

  constructor(
    private exploitantService: ExploitantService, 
    private matDialog: MatDialog,
    private activatedRoute: ActivatedRoute,
    private router: Router
  ) { }
  
  displayedColumnsExploitant: string[] = ['exploitant', 'competences', 'localisation', 'activity', 'specialite', 'action']
 
  ngOnInit(): void {     
    this.loadExploitantList()
    this.exploitantGetById()     
  }

  // @LoadingIndicator(['divLoad'])
  loadExploitantList(){
    this.exploitantService.getExploitantList().snapshotChanges().pipe(
      map(changes => changes.map(c => ({ key: c.payload.key, ...c.payload.val() }))
      )
    ).subscribe(
      exploitants => {
        this.exploitants = exploitants
        // this.applyFiltered()
      }
    )
  }

  // total row table
  getTotalRow(){
    return this.exploitants.length
  }

  // filtre CEDAR

  // filters = {}

  // private applyFiltered(){
  //   this.filteredCedar = this.exploitants.filter(this.exploitants, this.exploitants.conforms(this.filters))
  // }

  // filterExact(property: string, rule: any){
  //   this.filters[property] = val => val == rule
  //   this.applyFiltered()
  // }

  // open modal exploitant
  openDialogAddExploitant(){
    this.matDialog.open(ExploitantCreateComponent)
  }

  openDialogDetailsExploitant(){
    this.matDialog.open(ExploitantDetailComponent)
  }

  // delete 
  deleteExploitant(exploitant: Exploitant){
    this.exploitantService.deleteById(exploitant.exploitantId)
  }

  exploitantGetById(){
    this.activatedRoute.params.subscribe(params => {
      const id = params.id
      if (id){
        this.exploitantService.getExploitantById(id).snapshotChanges()
          .subscribe(res => {
            if(res.payload.exists()){
              this.exploitants = res.payload.toJSON() as Exploitant
              this.exploitants.$key = res.key
              console.log( this.exploitants)
            } else {
              this.router.navigate(['/'])
            }
          })
      }
    })
  }

  calculation() {
    let sum: number = 0;
    if (this.exploitants)
      for (let row of this.exploitants.data) {
        if (row.id != 0) sum += row.iznos;
      }
    return sum;
  }

}
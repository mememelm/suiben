import { Component, OnInit } from '@angular/core';
import { ExploitantService, AuthentificationService } from "../../../services";
import { Router } from "@angular/router";
import { FormGroup, FormGroupDirective, NgForm, FormControl, FormBuilder, Validators, FormArray } from '@angular/forms';
// import { DatePipe } from '@angular/common';
import { ErrorStateMatcher } from "@angular/material/core";
import {ToastrService} from 'ngx-toastr'


/** ErrorStateMatcher export tokana foana => material => component => callback */
export class MyErrorStateMatcher implements ErrorStateMatcher {
  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {
    const isSubmitted = form && form.submitted;
    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
  }
}


@Component({
  selector: 'app-exploitant-create',
  templateUrl: './exploitant-create.component.html',
  styleUrls: ['./exploitant-create.component.css']
})
export class ExploitantCreateComponent implements OnInit {
  
  // formgp
  exploitantFormGroup : FormGroup
  resultCalculChildren: any
  dateInsert: any = new Date()

  // pattern
  patternChar = '^[a-zA-Zèéêë ]*$'
  patternNumber = '^[0-9]+$'
  patternMixed = '^[a-zA-Zèéêë\\0-9 ]*$'
  defaultState = 'actif'  

  constructor(
    private exploitantService: ExploitantService, 
    private router: Router, 
    private authentificationService: AuthentificationService,
    private formBuilder: FormBuilder,
    // private datePipe: DatePipe,
    private toastService: ToastrService) { 
      // this.dateInsert = this.datePipe.transform(this.dateInsert, 'dd-LL-yyyy')
    }

  ngOnInit(): void {
    this.exploitantService.getExploitantList()
    this.exploitantForm()
  }

  // GET get
  public get exploitantId(){ 
    return this.exploitantFormGroup.get('exploitantId').value 
  }   
  public get exploitantAge(){ 
    return this.exploitantFormGroup.get('exploitantAge').value 
  }
  public get exploitantCedar(){
    return this.exploitantFormGroup.get('exploitantCedar').value
  }
  public get exploitantChildrenNumber(){ 
    return this.exploitantFormGroup.get('exploitantChildrenNumber').value
  }
  public get exploitantChildrenNumberOther(){ 
    return this.exploitantFormGroup.get('exploitantChildrenNumberOther').value 
  } 
  public get exploitantChildrenNumberSch(){ 
    return this.exploitantFormGroup.get('exploitantChildrenNumberSch').value 
  }
  public get exploitantDate(){
    return this.exploitantFormGroup.get('exploitantDate').value
  }   
  public get exploitantDistrict(){ 
    return this.exploitantFormGroup.get('exploitantDistrict').value 
  }
  public get exploitantFirstName(){ 
    return this.exploitantFormGroup.get('exploitantFirstName').value
  }
  public get exploitantFokotany(){
    return this.exploitantFormGroup.get('exploitantFokotany').value
  }
  public get exploitantFormation(){ 
    return this.exploitantFormGroup.get('exploitantFormation').value 
  }  
  public get exploitantHabitAndCustoms(){ 
    return this.exploitantFormGroup.get('exploitantHabitAndCustoms').value 
  }   
  public get exploitantInCharge(){ 
    return this.exploitantFormGroup.get('exploitantInCharge').value 
  }  
  public get exploitantLastName(){ 
    return this.exploitantFormGroup.get('exploitantLastName').value 
  }
  public get exploitantLived(){ 
    return this.exploitantFormGroup.get('exploitantLived').value
  }
  public get exploitantMaritalStatus(){ 
    return this.exploitantFormGroup.get('exploitantMaritalStatus').value
  } 
  public get exploitantMember(){ 
    return this.exploitantFormGroup.get('exploitantMember').value 
  }   
  public get exploitantObjectives(){ 
    return this.exploitantFormGroup.get('exploitantObjectives').value 
  }
  public get exploitantPower(){ 
    return this.exploitantFormGroup.get('exploitantPower').value
  }
  public get exploitantRegion(){ 
    return this.exploitantFormGroup.get('exploitantRegion').value 
  } 
  public get $exploitantRole(){ 
    return this.exploitantFormGroup.get('exploitantRole').value 
  }   
  public get exploitantSchooling(){ 
    return this.exploitantFormGroup.get('exploitantSchooling').value 
  }
  public get exploitantSex(){ 
    return this.exploitantFormGroup.get('exploitantSex').value
  }
  public get exploitantSpeciality1(){ 
    return this.exploitantFormGroup.get('exploitantSpeciality1').value 
  } 
  public get exploitantSpeciality2(){ 
    return this.exploitantFormGroup.get('exploitantSpeciality2').value 
  }
  public get expoitantCommune(){ 
    return this.exploitantFormGroup.get('expoitantCommune').value
  }
  public get expoitantHamlet(){ 
    return this.exploitantFormGroup.get('expoitantHamlet').value 
  } 
  public get exploitantState(){
    return this.exploitantFormGroup.get('exploitantState').value
  }

  exploitantForm(){
    this.exploitantFormGroup = this.formBuilder.group({
      exploitantId: [this.exploitantService.exploitantKey, [Validators.required]],
      exploitantAge: ['', [Validators.pattern(this.patternNumber), Validators.maxLength(2)]],
      exploitantCedar: [''], // cedar user
      exploitantChildrenNumber: ['', [Validators.pattern(this.patternNumber), Validators.maxLength(2)]],
      exploitantChildrenNumberOther: [this.resultCalculChildren], // calc
      exploitantChildrenNumberSch: ['', [Validators.pattern(this.patternNumber)]], // calc
      exploitantCommune: ['', [Validators.pattern(this.patternMixed)]],
      exploitantDate: [this.dateInsert, Validators.required],
      exploitantDistrict: ['', [Validators.pattern(this.patternMixed)]],
      exploitantFirstName: ['', [Validators.minLength(2), Validators.pattern(this.patternChar)]],   
      exploitantFokotany: ['', [Validators.pattern(this.patternMixed)]],   
      exploitantFormation: ['', [Validators.pattern(this.patternChar)]],
      exploitantHabitAndCustoms: ['', [Validators.pattern(this.patternChar)]],
      exploitantHamlet: ['', [Validators.pattern(this.patternChar)]],
      exploitantInCharge: ['', [Validators.pattern(this.patternNumber)]],
      exploitantLastName: ['', [Validators.pattern(this.patternChar), Validators.required]],
      exploitantLived: ['', [Validators.pattern(this.patternMixed)]],
      exploitantMaritalStatus: ['', [Validators.pattern(this.patternChar)]],
      exploitantMember: ['', [Validators.pattern(this.patternChar)]],
      exploitantObjectives: ['', [Validators.pattern(this.patternMixed)]],
      exploitantPower: ['', [Validators.pattern(this.patternChar)]],
      exploitantRegion: ['', [Validators.pattern(this.patternMixed)]],
      exploitantRole: ['', [Validators.pattern(this.patternChar)]],
      exploitantSchooling: ['', [Validators.pattern(this.patternChar)]],
      exploitantSex: ['', [Validators.pattern(this.patternChar), Validators.required]],
      exploitantSpeciality1: ['', [Validators.pattern(this.patternChar)]],
      exploitantSpeciality2: ['', [Validators.pattern(this.patternChar)]],
      exploitantState: [this.defaultState],
      schooling: this.formBuilder.array([]) // ajouter field 
    })
  }

  // gestion erreur matérial
  matcher = new MyErrorStateMatcher()

  // accordeon ajout
  step = 0;
  setStep(index: number) { this.step = index }
  nextStep() { this.step++ }
  prevStep() { this.step-- }

  //calcul repartition enfant
  calculChildren(){
    this.resultCalculChildren = this.exploitantChildrenNumber - this.exploitantChildrenNumberSch
    // console.log(this.resultCalculChildren)
  }

  // reset form field
  resetForm(){
    return this.exploitantFormGroup.reset()
  }

  // create exploitant
  addExploitant(){
    this.exploitantService.createExploitant(this.exploitantFormGroup.value)
    let e = this.authentificationService.currentUser()
    console.log('c.exploitant >>>> '+e)
    this.toastService.success(this.exploitantFormGroup.controls['exploitantLastName'].value + ' ' + this.exploitantFormGroup.controls['exploitantFirstName'].value + ' a été ajouté avec succes!')
    this.resetForm()
    this.router.navigate(['/exploitantlist'])
  }  

  // ajouter field => .... 
  schooling(): FormArray{
    return this.exploitantFormGroup.get('exploitantScholling') as FormArray
  }

  newSchooling(): FormGroup{
    return this.formBuilder.group({exploitantScholling:''})
  }

  addSchooling(){
    this.schooling().push(this.newSchooling())
  }

  removeSchooling(i:number){
    this.schooling().removeAt(i)
  }
}